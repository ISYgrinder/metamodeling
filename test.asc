

#SET home_position: ("http://10.0.6.41:8080/dobot/api/operation/moveToHomePosition")
#SET turn_off: ("http://10.0.6.41:8080/dobot/api/operation/turnOffSuctionCup")

#CC "AdoScript" HTTP_REQUEST (turn_off) 
#CC "AdoScript" HTTP_REQUEST (home_position) verb:"POST"

#SETG home_position_str: "http://10.0.6.41:8080/dobot/api/operation/moveToHomePosition"
#CC "AdoScript" HTTP_REQUEST (STR home_position_str) verb:"POST"
#CC "AdoScript" HTTP_REQUEST ("http://10.0.6.41:8080/dobot/api/operation/moveToPosition?x=-100&y=-200&z=50") verb:"POST" 
(*)

CC "Core" EVAL_EXPRESSION coreExpr [ objid:idValue | modelid:intValue ]

#-->RESULT ecode:intValue result:value  

# get all selected objects
CC "Modeling" GET_SELECTED
IF (objids = "")
{
   CC "AdoScript" ERRORBOX "Select an instance first!"
   EXIT
}
aval ( className , instName , attrName )

# from the list of selected objects, extract the first objectid
SET firstselected:(token(objids,0," "))

CC "Core" EVAL_EXPRESSION (aval("Double")**2 + aval("Integer")**3) objid:(VAL firstselected)

CC "AdoScript" INFOBOX (result)

    SETG id_InstId: (instid)
    SETG id_InstId: (instid) 
    SETG id_ClassId: (classid) 
    SETG id_ModelId: (modelid)
    SETG id_RealClassId: (realclassid)
    SETG id_RealInstId: (realinstanceid)
   
    CC "AdoScript" INFOBOX ("Modelid:   " + STR(id_ModelId))
    CC "AdoScript" INFOBOX ( "  ClassId:  " + STR(id_ClassId))
    CC "AdoScript" INFOBOX ("  InstanceId:   " + STR(id_InstId))
    CC "AdoScript" INFOBOX ("  RealInstanceId:   " + STR(id_RealInstId))
    CC "AdoScript" INFOBOX ("  RealClassId:   " + STR(id_RealClassId))

    title:"You are deleting the instance..."

(*)
(*)
on event
- get all the objects
- get all objects with class robo
- loop through all these objects and find the active one 
- get the position values of the robot
- loop through all the objects with classname pickup, function, storage, waypoint and get their position
- set a new position in relation to the robot (conversion?)

note:
mit if arbeiten und immer checken, dass ich die nötigen werte überhaupt holen kann. 
(*)

CC "Modeling" GET_ACT_MODEL
SETG relevantRobot_o_obj:""
IF (ecode = 0) {
  CC "Core" LOAD_MODEL (activeModelId)
  SETL activeModelId: (modelid)

  CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Robot"
  SETL robot_l_obj:(objids)
  
  

  FOR i in:(robot_l_obj) sep:" " {
    
    CC "Core"  GET_CLASS_ID classname:"Robot"
    SETL robot_c_id:(classid)

    CC "Core" GET_ATTR_ID classid:(robot_c_id) attrname:"Relevant Robot"
    SETL relevant_robot_a_id:(attrid)
    
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrid:(relevant_robot_a_id)
    SETL relevant_robot_a_val:(val)

    IF (VAL relevant_robot_a_val = 1) {
      SETG relevantRobot_o_obj:(tokunion(relevantRobot_o_obj,(i), " "))
    }
  }
  
  IF (relevantRobot_o_obj != "") {
    
    CC "Core" GET_ATTR_ID classid:(robot_c_id) attrname:"Position"
    SETL robot_position_a_id:(attrid)
    CC "Core" GET_ATTR_VAL objid:(VAL relevantRobot_o_obj) attrid:(robot_position_a_id)
    SETL robot_position_val:(val)
    LEO parse:(robot_position_val) get-tmm-value:xr:"x" get-tmm-value:yr:"y" get-tmm-value:wr:"w" get-tmm-value:hr:"h"
    SETL xr:(CMS xr)
    SETL yr:(CMS yr)
    SETL wr:(CMS wr)
    SETL hr:(CMS hr)
    #SETL center_x:(xr + (wr/2))
    #SETL center_y:(yr + (hr/2))

    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Pickup"
    SETL pickup_l_obj:(objids)
    CC "Core"  GET_CLASS_ID classname:"Pickup"
    SETL pickup_c_id:(classid)
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Function"
    SETL function_l_obj:(objids)
    CC "Core"  GET_CLASS_ID classname:"Function"
    SETL function_c_id:(classid)
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Storage"
    SETL storage_l_obj:(objids)
    CC "Core"  GET_CLASS_ID classname:"Storage"
    SETL storage_c_id:(classid)
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Waypoint"
    SETL waypoint_l_obj:(objids)
    CC "Core"  GET_CLASS_ID classname:"Waypoint"
    SETL waypoint_c_id:(classid)
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Item"
    SETL item_l_obj:(objids)
    CC "Core"  GET_CLASS_ID classname:"Item"
    SETL item_c_id:(classid)

    

    FOR i in:(pickup_l_obj) sep:" " {
      CC "Core"  GET_CLASS_ID classname:"Pickup"
      SETL i_c_id:(classid)
      CC "Core" GET_ATTR_ID classid:(i_c_id) attrname:"Position"
      SETL i_a_id:(attrid)
      CC "Core" GET_ATTR_VAL objid:(VAL i) attrid:(i_a_id)
      SETL i_a_val:(val)
      LEO parse:(i_a_val) get-tmm-value:xi:"x" get-tmm-value:yi:"y" get-tmm-value:wi:"w" get-tmm-value:hi:"h"
      SETL xi:(CMS xi)
      SETL yi:(CMS yi)
      SETL wi:(CMS wi)
      SETL hi:(CMS hi)
      SETL center_x:(xi + (wi/2))
      SETL center_y:(yi + (hi/2))

      SETL convertedX_real:(center_x-xr)
      SETL convertedY_real:(yr-center_y)

      CC "Core" GET_ATTR_ID classid:(i_c_id) attrname:"x"
      SETL x_a_id:(attrid)
      CC "Core" GET_ATTR_ID classid:(i_c_id) attrname:"y"
      SETL y_a_id:(attrid)
      CC "Core" SET_ATTR_VAL objid:(VAL i) attrid:(x_a_id) val:(REAL convertedX_real)
      CC "Core" SET_ATTR_VAL objid:(VAL i) attrid:(y_a_id) val:(REAL convertedY_real)
    }

    FOR i in:(function_l_obj) sep:" " {
      CC "Core"  GET_CLASS_ID classname:"Function"
      SETL i_c_id:(classid)
      CC "Core" GET_ATTR_ID classid:(i_c_id) attrname:"Position"
      SETL i_a_id:(attrid)
      CC "Core" GET_ATTR_VAL objid:(VAL i) attrid:(i_a_id)
      SETL i_a_val:(val)
      LEO parse:(i_a_val) get-tmm-value:xi:"x" get-tmm-value:yi:"y" get-tmm-value:wi:"w" get-tmm-value:hi:"h"
      SETL xi:(CMS xi)
      SETL yi:(CMS yi)
      SETL wi:(CMS wi)
      SETL hi:(CMS hi)
      SETL center_x:(xi + (wi/2))
      SETL center_y:(yi + (hi/2))
      
      SETL convertedX_real:(center_x-xr)
      SETL convertedY_real:(yr-center_y)

      CC "Core" GET_ATTR_ID classid:(i_c_id) attrname:"x"
      SETL x_a_id:(attrid)
      CC "Core" GET_ATTR_ID classid:(i_c_id) attrname:"y"
      SETL y_a_id:(attrid)
      CC "Core" SET_ATTR_VAL objid:(VAL i) attrid:(x_a_id) val:(REAL convertedX_real)
      CC "Core" SET_ATTR_VAL objid:(VAL i) attrid:(y_a_id) val:(REAL convertedY_real)
    }

    FOR i in:(waypoint_l_obj) sep:" " {
      CC "Core"  GET_CLASS_ID classname:"Waypoint"
      SETL i_c_id:(classid)
      CC "Core" GET_ATTR_ID classid:(i_c_id) attrname:"Position"
      SETL i_a_id:(attrid)
      CC "Core" GET_ATTR_VAL objid:(VAL i) attrid:(i_a_id)
      SETL i_a_val:(val)
      LEO parse:(i_a_val) get-tmm-value:xi:"x" get-tmm-value:yi:"y" get-tmm-value:wi:"w" get-tmm-value:hi:"h"
      SETL xi:(CMS xi)
      SETL yi:(CMS yi)
      SETL wi:(CMS wi)
      SETL hi:(CMS hi)
      SETL center_x:(xi + (wi/2))
      SETL center_y:(yi + (hi/2))
      
      SETL convertedX_real:(center_x-xr)
      SETL convertedY_real:(yr-center_y)

      CC "Core" GET_ATTR_ID classid:(i_c_id) attrname:"x"
      SETL x_a_id:(attrid)
      CC "Core" GET_ATTR_ID classid:(i_c_id) attrname:"y"
      SETL y_a_id:(attrid)
      CC "Core" SET_ATTR_VAL objid:(VAL i) attrid:(x_a_id) val:(REAL convertedX_real)
      CC "Core" SET_ATTR_VAL objid:(VAL i) attrid:(y_a_id) val:(REAL convertedY_real)
    }
    FOR i in:(storage_l_obj) sep:" " {
      CC "Core"  GET_CLASS_ID classname:"Storage"
      SETL i_c_id:(classid)
      CC "Core" GET_ATTR_ID classid:(i_c_id) attrname:"Position"
      SETL i_a_id:(attrid)
      CC "Core" GET_ATTR_VAL objid:(VAL i) attrid:(i_a_id)
      SETL i_a_val:(val)
      LEO parse:(i_a_val) get-tmm-value:xi:"x" get-tmm-value:yi:"y" get-tmm-value:wi:"w" get-tmm-value:hi:"h"
      SETL xi:(CMS xi)
      SETL yi:(CMS yi)
      SETL wi:(CMS wi)
      SETL hi:(CMS hi)
      SETL center_x:(xi + (wi/2))
      SETL center_y:(yi + (hi/2))
      
      SETL convertedX_real:(center_x-xr)
      SETL convertedY_real:(yr-center_y)

      CC "Core" GET_ATTR_ID classid:(i_c_id) attrname:"x"
      SETL x_a_id:(attrid)
      CC "Core" GET_ATTR_ID classid:(i_c_id) attrname:"y"
      SETL y_a_id:(attrid)
      CC "Core" SET_ATTR_VAL objid:(VAL i) attrid:(x_a_id) val:(REAL convertedX_real)
      CC "Core" SET_ATTR_VAL objid:(VAL i) attrid:(y_a_id) val:(REAL convertedY_real)
    }

    FOR i in:(item_l_obj) sep:" " {
      CC "Core"  GET_CLASS_ID classname:"Item"
      SETL i_c_id:(classid)
      CC "Core" GET_ATTR_ID classid:(i_c_id) attrname:"Position"
      SETL i_a_id:(attrid)
      CC "Core" GET_ATTR_VAL objid:(VAL i) attrid:(i_a_id)
      SETL i_a_val:(val)
      LEO parse:(i_a_val) get-tmm-value:xi:"x" get-tmm-value:yi:"y" get-tmm-value:wi:"w" get-tmm-value:hi:"h"
      SETL xi:(CMS xi)
      SETL yi:(CMS yi)
      SETL wi:(CMS wi)
      SETL hi:(CMS hi)
      SETL center_x:(xi + (wi/2))
      SETL center_y:(yi + (hi/2))
      
      SETL convertedX_real:(center_x-xr)
      SETL convertedY_real:(yr-center_y)

      CC "Core" GET_ATTR_ID classid:(i_c_id) attrname:"x"
      SETL x_a_id:(attrid)
      CC "Core" GET_ATTR_ID classid:(i_c_id) attrname:"y"
      SETL y_a_id:(attrid)
      CC "Core" SET_ATTR_VAL objid:(VAL i) attrid:(x_a_id) val:(REAL convertedX_real)
      CC "Core" SET_ATTR_VAL objid:(VAL i) attrid:(y_a_id) val:(REAL convertedY_real)
    }

  }


}




(*)
#Reset

#------------------------------#_____get active model_____#------------------------------#

CC "Modeling" GET_ACT_MODEL
SET activeModelId: (modelid)
CC "Core" LOAD_MODEL (activeModelId)

#------------------------------#_____get default player information_____#------------------------------#

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Player"
SET player_c_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Player"
SET player_c_id:(classid)

CC "Core" GET_ATTR_ID classid:(player_c_id) attrname:"Name"
SET name_a_id:(attrid)
CC "Core" GET_ATTR_ID classid:(player_c_id) attrname:"Turn"
SET turn_a_id:(attrid)
CC "Core" GET_ATTR_ID classid:(player_c_id) attrname:"active_piece"
SET activep_a_id:(attrid)
CC "Core" GET_ATTR_ID classid:(player_c_id) attrname:"Team"
SET team_a_id:(attrid)

#------------------------------#_____get default piece information_____#------------------------------#

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Piece"
SET pieces_c_obj:(objids)


CC "Core"  GET_CLASS_ID classname:"Piece"
SET piece_c_id:(classid)


CC "Core" GET_ATTR_ID classid:(player_c_id) attrname:"Name"
SET name_a_id:(attrid)
CC "Core" GET_ATTR_ID classid:(piece_c_id) attrname:"King"
SET king_a_id:(attrid)
CC "Core" GET_ATTR_ID classid:(piece_c_id) attrname:"Status"
SET status_a_id:(attrid)
CC "Core" GET_ATTR_ID classid:(piece_c_id) attrname:"I am active"
SET iAmactive_a_id:(attrid) 
CC "Core" GET_ATTR_ID classid:(player_c_id) attrname:"PosX"
SET posx_a_id:(attrid)
CC "Core" GET_ATTR_ID classid:(player_c_id) attrname:"PosY"
SET posy_a_id:(attrid)


#------------------------------#_____robot_____#------------------------------#

#CC "AdoScript" debug HTTP_REQUEST "http://www.adoxx.org" verb:"POST" binary
#CC "AdoScript" debug HTTP_REQUEST "http://www.adoxx.org" verb:"GET" binary
#CC "AdoScript" VIEWBOX text:(response)
#CC "AdoScript" VIEWBOX text:(header)
#CC "AdoScript" VIEWBOX text:(host)

#global_str_dll_httprequest 


#SET home_position: ("http://10.0.6.41:8080/dobot/api/operation/moveToHomePosition")
#SET turn_off: ("http://10.0.6.41:8080/dobot/api/operation/turnOffSuctionCup")

#CC "AdoScript" HTTP_REQUEST (turn_off) 
#CC "AdoScript" HTTP_REQUEST (home_position) 

#SET map_headers: ("\"Content-Type\": \"application/json\"")
#HTTP_SEND_REQUEST (home_position) str_method:("POST") map_reqheaders:(map_headers) str_reqbody:("") val_respcode:val_httpcode map_respheaders:map_respheaders str_respbody:str_respbody


#------------------------------#_____TEST_____#------------------------------#

CC "Modeling" GET_SELECTED
FOR objid in:(objids) {
    CC "Core" GET_CLASS_ID objid:(VAL objid)
    IF (NOT isrel) {
        # get position
        CC "Core" GET_ATTR_ID classid:(classid) attrname:"Position"
        SET test_attr_id:(attrid)
        CC "Core" GET_ATTR_VAL objid:(VAL objid) attrid:(test_attr_id)
        SET attr_val:(val) 
        LEO parse:(attr_val) get-tmm-value:x:"x" get-tmm-value:y:"y" get-int-value:index:"index"
        # increment x coordinate and set new position
        SET x:(x + 1cm)
        CC "Modeling" SET_OBJ_POS objid:(VAL objid) x:(x) y:(y)
        CC "AdoScript" INFOBOX (VAL x)
        CC "AdoScript" INFOBOX (VAL y)
        CC "AdoScript" INFOBOX (VAL index)
    }
}






GRAPHREP sizing:asymmetrical
SHADOW off

SET green: $8ff0a4
SET black: $000000

# We use a table so it is properly resizable
TABLE x:0cm y:0cm w:4cm h:4cm cols:2 rows:3 w1:100% w2:0.2cm h1:0.2cm h2:5% h3:100% 
STRETCH off

# clip it away
CLIP_ROUNDRECT x:(tabx0) y:(taby1) w:(tabw1) h:(tabh2+tabh3) rx:(tabh2) ry:(tabh2)
#add the color 
GRADIENT_RECT x:(tabx0) y:(taby1) w:(tabw1) h:(tabh2+tabh3) style:downdiag color1:(green)  color2:(green)

CLIP_OFF


FILL style:null
PEN color:(black) w:0.04cm

ROUNDRECT x:(tabx0) y:(taby1) w:(tabw1) h:(tabh2+tabh3) rx:(tabh2) ry:(tabh2)

# Calculate the place fot the text and print the name
SET iOffset:((1-sin(0.785398))*tabh2)
ATTR "Name" x:(tabx0+tabw1/2) y:(taby1+tabh2) w:c:(tabw1-(iOffset+0.05cm)*2) h:c:(tabh2+tabh3-(iOffset+0.05cm)*2) line-break:rigorous
#ATTR "Name" y:.9cm w:c:2.8cm h:t


(*

GRAPHREP sizing:asymmetrical
STRETCH off

FILL color:$a51d2d
ROUNDRECT x:0cm y:0cm w:3cm h:3cm rx:.3cm ry:0.3cm

ATTR "Name" y:.9cm w:c:2.8cm h:t

# Visualize the execute button if so desired
#AVAL set-default:"yes" showExec:"vizExecuteButton"
#IF (showExec = "yes") {
#  FILL style:mix50 color:(colExec1) fcolor:(colExec2)
#  ROUNDRECT x:(tabx2-1.4cm) y:-1cm w:(1.4cm) h:(0.6cm) rx:0.2cm ry:0.2cm
#  TEXT "Execute" x:(tabx2-1.3cm) y:-0.7cm w:l h:c
#  HOTSPOT "Execute" x:(tabx2-1.4cm) y:-1cm w:(1.4cm) h:(0.6cm)
#}


#AVAL a:"number_of_objects"
#TEXT (STR a) x:2cm y:2cm

(*)

(*)

GRAPHREP sizing:asymmetrical
SHADOW off

SET red: $a51d2d
SET black: $000000

# We use a table so it is properly resizable
TABLE x:0cm y:0cm w:2cm h:2cm cols:2 rows:3 w1:100% w2:0.2cm h1:0.2cm h2:5% h3:100% 
STRETCH off

# clip it away
CLIP_ROUNDRECT x:(tabx0) y:(taby1) w:(tabw1) h:(tabh2+tabh3) rx:(tabh2) ry:(tabh2)
#add the color 
GRADIENT_RECT x:(tabx0) y:(taby1) w:(tabw1) h:(tabh2+tabh3) style:downdiag color1:(red)  color2:(red)

CLIP_OFF


FILL style:null
PEN color:(black) w:0.04cm

ROUNDRECT x:(tabx0) y:(taby1) w:(tabw1) h:(tabh2+tabh3) rx:(tabh2) ry:(tabh2)

# Calculate the place fot the text and print the name
SET iOffset:((1-sin(0.785398))*tabh2)
ATTR "Name" x:(tabx0+tabw1/2) y:(taby1+tabh2) w:c:(tabw1-(iOffset+0.05cm)*2) h:c:(tabh2+tabh3-(iOffset+0.05cm)*2) line-break:rigorous
#ATTR "Name" y:.9cm w:c:2.8cm h:t

(* 
Visualize the execute button if so desired
AVAL set-default:"yes" showExec:"vizExecutebutton"
IF (showExec = "yes") {
  FILL style:mix50 color:(colExec1) fcolor:(colExec2)
  ROUNDRECT x:(tabx2-1.4cm) y:(taby0) w:(1.4cm) h:(0.6cm) rx:0.2cm ry:0.2cm
  TEXT "Execute" x:(tabx2-1.3cm) y:(taby0+0.3cm) w:l h:c
  HOTSPOT "Execute" x:(tabx2-1.4cm) y:(taby0) w:(1.4cm) h:(0.6cm)
}
*)


(*
GRAPHREP sizing:asymmetrical 
RECTANGLE x:0cm y:0cm w:3cm h:3cm 
TABLE x:0cm y:0cm w:3cm h:3cm cols:3 rows:3 w1:0.2cm w2:100% w3:0.2cm h1:0.2cm h2:100% h3:0.2cm 
STRETCH off ATTR "Name" x:(tabx1) y:(taby1) w:(tabw2) h:(tabh2)

*)


#  TEXT "Execute" x:(tabx2-1.3cm) y:-0.7cm w:l h:c
#  HOTSPOT "Execute" x:(tabx2-1.4cm) y:-1cm w:(1.4cm) h:(0.6cm)
#}


#AVAL a:"number_of_objects"
#TEXT (STR a) x:2cm y:2cm

(*)

GRAPHREP sizing:asymmetrical
SHADOW off

SET red: $a51d2d
SET black: $000000

# We use a table so it is properly resizable
TABLE x:0cm y:0cm w:2cm h:2cm cols:2 rows:3 w1:100% w2:0.2cm h1:0.2cm h2:5% h3:100% 
STRETCH off

# clip it away
CLIP_ROUNDRECT x:(tabx0) y:(taby1) w:(tabw1) h:(tabh2+tabh3) rx:(tabh2) ry:(tabh2)
#add the color 
GRADIENT_RECT x:(tabx0) y:(taby1) w:(tabw1) h:(tabh2+tabh3) style:downdiag color1:(red)  color2:(red)

CLIP_OFF


FILL style:null
PEN color:(black) w:0.04cm

ROUNDRECT x:(tabx0) y:(taby1) w:(tabw1) h:(tabh2+tabh3) rx:(tabh2) ry:(tabh2)

# Calculate the place fot the text and print the name
SET iOffset:((1-sin(0.785398))*tabh2)
ATTR "Name" x:(tabx0+tabw1/2) y:(taby1+tabh2) w:c:(tabw1-(iOffset+0.05cm)*2) h:c:(tabh2+tabh3-(iOffset+0.05cm)*2) line-break:rigorous
#ATTR "Name" y:.9cm w:c:2.8cm h:t

(* 
Visualize the execute button if so desired
AVAL set-default:"yes" showExec:"vizExecutebutton"
IF (showExec = "yes") {
  FILL style:mix50 color:(colExec1) fcolor:(colExec2)
  ROUNDRECT x:(tabx2-1.4cm) y:(taby0) w:(1.4cm) h:(0.6cm) rx:0.2cm ry:0.2cm
  TEXT "Execute" x:(tabx2-1.3cm) y:(taby0+0.3cm) w:l h:c
  HOTSPOT "Execute" x:(tabx2-1.4cm) y:(taby0) w:(1.4cm) h:(0.6cm)
}
*)


(*
GRAPHREP sizing:asymmetrical 
RECTANGLE x:0cm y:0cm w:3cm h:3cm 
TABLE x:0cm y:0cm w:3cm h:3cm cols:3 rows:3 w1:0.2cm w2:100% w3:0.2cm h1:0.2cm h2:100% h3:0.2cm 
STRETCH off ATTR "Name" x:(tabx1) y:(taby1) w:(tabw2) h:(tabh2)

(*)
(*) 





SET blue: $99c1f1

GRAPHREP layer:-1

AVAL robo: "rangeRobo"
AVAL min: "rangeMin"
AVAL max: "rangeMax"

AVAL active: "active"

FILL color:$9a9996
ELLIPSE rx:(CM max) ry:(CM max)
FILL color:$ffffff
ELLIPSE rx:(CM min) ry:(CM min)

IF (active = "1") {
  FILL color:$a51d2d
  ELLIPSE rx:(CM robo) ry:(CM robo)
}
ELSE {
  FILL color:$ffbe6f
  ELLIPSE rx:(CM robo) ry:(CM robo)
}

FILL color:black
RECTANGLE x:0cm y:0cm w:1cm h:1cm

ATTR "Name" y:1cm w:c:2.8cm h:t


#IF boolExpr { ElementSequence } { ELSIF booleanExpr { ElementSequence } }[ ELSE { ElementSequence } ] .

#IF (bnw) {
#  SET fontcolor:("black")
#  SET colBrd:("darkgray")
#  SET colFFm:("white")
#} ELSE {
#  AVAL fontcolor:"Fontcolor"
#  SET colBrd:("darkgray")
#  AVAL colFFm:"Color"
#}