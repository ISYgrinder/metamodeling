# Version: 1.0.0
# Date: 2021-09-07

# This file contains global (lambda) functions which help with common tasks
# when using strings. It does not contain conversions! For these see
# "ASC_GlobalFunctions_Conversions.asc"


### Direct Dependencies: None


# Available functions for strings:
# * countSubstringOccurrence - counts how often a sub-string is found in
#     another stirng.
# * countTokenOccurrence - counts how oftne a token is found in a string list.
# * replaceTextInArea - replaces the text between two positions with a
#     different text that can be longer or shorter.
# * findNextNonWhitespace - finds the next index in a string that doesn't
#     contain a white-space character.



#------------------------------------------------------------------------------
FUNCTION countSubstringOccurrence:global str_input:string str_substr:string
# Counts how often a sub-string is found in an input. This one has two
# parameters, where the first parameter is the input and the second the
# sub-string to search for. Uses a search and a while loop to count how often
# the sub-string can be found.
return:(
  set(substramount, 0),
  set(searchres, search(str_input, str_substr, 0)),
  while(searchres>=0, (
      set(substramount, substramount+1),
      set(searchres, search(str_input, str_substr, searchres+1))),
    substramount)
)
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------
FUNCTION countTokenOccurrence:global str_list:string str_token:string str_sep:string
# Counts how often a token is found in a string list. The first parameter is
# the list, the second the token to search for and the third parameter is the
# separator to use. Loops through all tokens and checks if they equal the one
# searching for.
return:(
  set(tokamount, 0),
  fortok(onetok, str_lost, str_sep, 
    cond(onetok = str_token, set(tokamount, tokamount+1), 0),
    tokamount)
)
#------------------------------------------------------------------------------



#------------------------------------------------------------------------------
FUNCTION replaceTextInArea:global str_source:string val_start:integer val_end:integer str_new:string
# Replaces the text of str_source between (incl.) val_start and (excl.) val_end
# with str_new.
#------------------------------------------------------------------------------
return:(
  copy(str_source, 0, val_start) + str_new + copy(str_source, val_end, -1)
)



#------------------------------------------------------------------------------
FUNCTION replaceNextInText:global str_source:string str_pattern:string str_new:string val_start:integer
# Replaces the next occurence of text str_pattern in str_source at or after
# the position val_start with str_new.
#------------------------------------------------------------------------------
return:(
  set(val_at, search(str_source, str_pattern, val_start)),
  cond(val_at < 0, str_source, replaceTextInArea(str_source, val_at, val_at + (LEN str_pattern), str_new))
)



#------------------------------------------------------------------------------
FUNCTION findNextNonWhitespace:global str_text:string val_index:integer
# Searches through str_text starting at val_index and looks for the next index
# that is not a white space character. White space characters include:
# * normal space " "
# * tab "\t"
# * carriage return "\r"
# * new line "\n"
#------------------------------------------------------------------------------
return:(
  while((val_index < (LEN str_text)) AND (search(" \t\r\n", str_text SUB val_index, 0) >= 0),
    set(val_index, val_index+1),
    cond(val_index < (LEN str_text), val_index, -1)
  )
)