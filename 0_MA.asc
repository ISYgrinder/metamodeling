# Version: 1.0.0
# Date: ....
# Author: Daniel von KÃ¤nel

(*
Possible dependencies: 
ASC_GlobalFunctions_Conversion (1.8, startup)
ASC_GlobalFunctions_MapSupport (1.8, startup)
ASC_GlobalFunctions_StringSupport (1.8, startup)
ASC_GlobalFunctions_JSON (1.8, startup)
ASC_GlobalProcedures_ExecuteFlowchart
ASC_GlobalProcedures_ExecAttrProf-beeup
ASC_GlobalVariables_FC
ASC_HttpRequestDll

Startup:
    EXECUTE file:("db:\\ASC_GlobalFunctions_Conversion.asc")
    EXECUTE file:("db:\\ASC_GlobalFunctions_DateTime.asc")
    EXECUTE file:("db:\\ASC_GlobalFunctions_JSON.asc")
    EXECUTE file:("db:\\ASC_GlobalFunctions_MapSupport.asc")
    EXECUTE file:("db:\\ASC_GlobalFunctions_RandomDistributions.asc")
    EXECUTE file:("db:\\ASC_GlobalFunctions_StringSupport.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_AutoStart.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_CloneUI.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_Cloning.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_ConfigFiles.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_Logging.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_ExecAsc.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_ExecAttrProf.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_ExtensionManagement.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_RecordSupport.asc")
    EXECUTE file:("db:\\ASC_Bridge_HttpRequestDll.asc") # Kept for backwards compatibility
    EXECUTE file:("db:\\ASC_OliveIntegration_GlobalProcedures.asc")

############---------------- MY CODE ----------------############
    CC "AdoScript" FREAD file:"C:\\Users\\Daniel\\Documents\\GitHub\\metamodeling\\1_MA_dep.asc"
    EXECUTE (text)
############---------------- MY CODE ----------------############

*)

# TODO: 
(*
Could be useful
    val_fc_delay
    val_fc_printtimes
    val_fc_highlight
*) 

#------------------------------#_____get active model_____#------------------------------#

# Get and store the model id. It is also used for other things beside the output windows.
CC "Modeling" GET_ACT_MODEL
IF (ecode <> 0) {
  CC "AdoScript" ERRORBOX ("Encountered an error while trying to read the model information. Stopping script now.")
  EXIT
}
CC "Core" LOAD_MODEL (activeModelId)
SETG activeModelId: (modelid)

#------------------------------#_____get default information_____#------------------------------#

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Robot"
SETL robot_l_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Robot"
SETL robot_c_id:(classid)

CC "Core" GET_ATTR_ID classid:(robot_c_id) attrname:"Position"
SETL robot_position_a_id:(attrid)

CC "Core" GET_ATTR_ID classid:(robot_c_id) attrname:"rangeMax"
SETL robot_rangeMax_a_id:(attrid)


CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Event"
SETL event_l_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Event"
SETL event_c_id:(classid)

CC "Core" GET_ATTR_ID classid:(event_c_id) attrname:"start"
SETL start_a_id:(attrid)

(*)(*)

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Intermediate"
SETL intermediate_l_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Intermediate"
SETL intermediate_c_id:(classid)
(*)
CC "Core" GET_ATTR_ID classid:(event_c_id) attrname:"Attribute X"
SETL x_a_id:(attrid)
(*)

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Pickup"
SETL pickup_l_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Pickup"
SETL pickup_c_id:(classid)

CC "Core" GET_ATTR_ID classid:(pickup_c_id) attrname:"Position"
SETL pickup_position_a_id:(attrid)


CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Function"
SETL function_l_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Function"
SETL function_c_id:(classid)

#we need a list...
SETG suctionA_l_id:""
SETG suctionB_l_id:""
SETG step_l_id:""



CC "Core" GET_ATTR_ID classid:(VAL function_c_id) attrname:"Suction Cup Action 1a" 
SETL suction1a_a_id:(attrid)
SETG suctionA_l_id:(tokunion(suctionA_l_id,(STR suction1a_a_id), " "))

CC "Core" GET_ATTR_ID classid:(VAL function_c_id) attrname:"Suction Cup Action 1b"
SETL suction1b_a_id:(attrid)
SETG suctionB_l_id:(tokunion(suctionB_l_id,(STR suction1b_a_id), " "))

CC "Core" GET_ATTR_ID classid:(VAL function_c_id) attrname:"Suction Cup Action 2a"
SETL suction2a_a_id:(attrid)
SETG suctionA_l_id:(tokunion(suctionA_l_id,(STR suction2a_a_id), " "))

CC "Core" GET_ATTR_ID classid:(VAL function_c_id) attrname:"Suction Cup Action 2b"
SETL suction2b_a_id:(attrid)
SETG suctionB_l_id:(tokunion(suctionB_l_id,(STR suction2b_a_id), " "))

CC "Core" GET_ATTR_ID classid:(VAL function_c_id) attrname:"Suction Cup Action 3a"
SETL suction3a_a_id:(attrid)
SETG suctionA_l_id:(tokunion(suctionA_l_id,(STR suction3a_a_id), " "))

CC "Core" GET_ATTR_ID classid:(VAL function_c_id) attrname:"Suction Cup Action 3b"
SETL suction3b_a_id:(attrid)
SETG suctionB_l_id:(tokunion(suctionB_l_id,(STR suction3b_a_id), " "))

CC "Core" GET_ATTR_ID classid:(VAL function_c_id) attrname:"Suction Cup Action 4a"
SETL suction4a_a_id:(attrid)
SETG suctionA_l_id:(tokunion(suctionA_l_id,(STR suction4a_a_id), " "))

CC "Core" GET_ATTR_ID classid:(VAL function_c_id) attrname:"Suction Cup Action 4b"
SETL suction4b_a_id:(attrid)
SETG suctionB_l_id:(tokunion(suctionB_l_id,(STR suction4b_a_id), " "))

CC "Core" GET_ATTR_ID classid:(VAL function_c_id) attrname:"Suction Cup Action 5a"
SETL suction5a_a_id:(attrid)
SETG suctionA_l_id:(tokunion(suctionA_l_id,(STR suction5a_a_id), " "))

CC "Core" GET_ATTR_ID classid:(VAL function_c_id) attrname:"Suction Cup Action 5b"
SETL suction5b_a_id:(attrid)
SETG suctionB_l_id:(tokunion(suctionB_l_id,(STR suction5b_a_id), " "))


CC "Core" GET_ATTR_ID classid:(VAL function_c_id) attrname:"Step 1"
SETL step1_a_id:(attrid)
SETG step_l_id:(tokunion(step_l_id,(STR step1_a_id), " "))

CC "Core" GET_ATTR_ID classid:(VAL function_c_id) attrname:"Step 2"
SETL step2_a_id:(attrid)
SETG step_l_id:(tokunion(step_l_id,(STR step2_a_id), " "))

CC "Core" GET_ATTR_ID classid:(VAL function_c_id) attrname:"Step 3"
SETL step3_a_id:(attrid)
SETG step_l_id:(tokunion(step_l_id,(STR step3_a_id), " "))

CC "Core" GET_ATTR_ID classid:(VAL function_c_id) attrname:"Step 4"
SETL step4_a_id:(attrid)
SETG step_l_id:(tokunion(step_l_id,(STR step4_a_id), " "))

CC "Core" GET_ATTR_ID classid:(VAL function_c_id) attrname:"Step 5"
SETL step5_a_id:(attrid)
SETG step_l_id:(tokunion(step_l_id,(STR step5_a_id), " "))


(*)
CC "Core" GET_ATTR_ID classid:(event_c_id) attrname:"Attribute X"
SETL x_a_id:(attrid)
(*)

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Storage"
SETL storage_l_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Storage"
SETL storage_c_id:(classid)

CC "Core" GET_ATTR_ID classid:(storage_c_id) attrname:"Position"
SETL storage_position_a_id:(attrid)

(*)
CC "Core" GET_ATTR_ID classid:(event_c_id) attrname:"Attribute X"
SETL x_a_id:(attrid)
(*)

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Waypoint"
SETL waypoint_l_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Waypoint"
SETL waypoint_c_id:(classid)

CC "Core" GET_ATTR_ID classid:(waypoint_c_id) attrname:"Position"
SETL waypoint_position_a_id:(attrid)

(*)
CC "Core" GET_ATTR_ID classid:(event_c_id) attrname:"Attribute X"
SETL x_a_id:(attrid)
(*)
    

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Item"
SETL item_l_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Item"
SETL item_c_id:(classid)

CC "Core" GET_ATTR_ID classid:(item_c_id) attrname:"Position"
SETL item_position_a_id:(attrid)



#------------------------------#_____prepare some attributes_____#------------------------------#
#------------------------------#_____prepare some attributes_____#------------------------------#
#------------------------------#_____prepare some attributes_____#------------------------------#

SETG relevantRobot_o_obj:""
SETG eventActual_o_obj:""
SETG eventNext_o_obj:""
SETG areaActual_o_obj:""
SETG delay_val:(0.0)
SETG selected_item_o_obj:""
SETG item_inside_l_obj:""
SETG x_step_name_str:"x"
SETG y_step_name_str:"y"
SETG z_step_name_str:"z"
SETG robo_middle_x_real:""
SETG robo_middle_y_real:""

SETG originalX_real:""
SETG originalY_real:""
SETG originalZ_real:""
SETG convertedX_real:""
SETG convertedY_real:""
SETG convertedZ_real:""

SETG urlMove_str: "http://10.0.6.41:8080/dobot/api/operation/moveToPosition?"
SETG home_position_str: "http://10.0.6.41:8080/dobot/api/operation/moveToHomePosition"
SETG turn_on_str: "http://10.0.6.41:8080/dobot/api/operation/turnOnSuctionCup"
SETG turn_off_str: "http://10.0.6.41:8080/dobot/api/operation/turnOffSuctionCup"


SETG robo_outputwin_str:("Robo")
SETG robo_outputwin_str_debug:("Robo - debug")


#------------------------------#_____make some preparations_____#------------------------------#

# Remove any previous dyes if there are any in the model
CC "Modeling" UNDYE_ALL modelid:(activeModelId)

CC "AdoScript" CLOSE_DOCKABLE_WINDOW winid:(robo_outputwin_str)
CC "AdoScript" CLOSE_DOCKABLE_WINDOW winid:(robo_outputwin_str_debug)

CC "Core" GET_MODEL_INFO modelid:(activeModelId)
SETG modelname_str_obj:(modelname)
SETG version_str_obj:(ver)

CC "AdoScript" CREATE_OUTPUT_WIN winid:(robo_outputwin_str) title:(robo_outputwin_str + " - " + modelname_str_obj  + " " + version_str_obj)   

#------------------------------#_____get start of event_____#------------------------------#

#here we find the start element and set eventActual_o_obj
PROCEDURE global FIND_START_EVENT {
    FOR i in:(event_l_obj) sep:" " {
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrid:(start_a_id) attrname:"start"
    SETL start_a_val:(val)
    
    IF (start_a_val = 1) {
        SETG eventActual_o_obj: (i)
    }
}
}


(*)TODO: If there is more than one 1 start available, 
        we should be able to get a box to chose which start we want to take. 
(*)


#------------------------------#_____find next event_____#------------------------------#

#here we find the next event and set eventNext_o_obj
PROCEDURE global FIND_NEXT_EVENT {  
    CC "Core" GET_CONNECTORS objid:(VAL eventActual_o_obj) out
    SETL connector_l_obj:(objids)

    CC "Core" GET_CONNECTORS objid:(VAL eventActual_o_obj) out
    SETL connector_l_obj:(objids)

    FOR i in:(connector_l_obj) sep:" " {
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL i)
        SETL endpointToo_l_obj:(toobjid)
        #CC "AdoScript" INFOBOX (endpointToo_l_obj)
        CC "Core" GET_CLASS_ID objid:(VAL endpointToo_l_obj)
        SETL endpoint_c_id:(classid)
        CC "Core" GET_CLASS_NAME classid:(VAL endpointToo_l_obj)
        SETL endpoint_c_name:(classname)
        #CC "AdoScript" INFOBOX (endpoint_c_name)
        IF (endpoint_c_name = "Event" OR endpoint_c_name = "Intermediate") {
            SETG eventNext_o_obj:(endpointToo_l_obj)
        }
    }
}
#------------------------------#_____find actual area_____#------------------------------#

#here we find the area for actual event and set areaActual_o_obj
PROCEDURE global FIND_AREA_FOR_ACTUAL_EVENT {  
    CC "Core" GET_CONNECTORS objid:(VAL eventActual_o_obj) out
    SETL connector_l_obj:(objids)

    CC "Core" GET_CONNECTORS objid:(VAL eventActual_o_obj) out
    SETL connector_l_obj:(objids)

    FOR i in:(connector_l_obj) sep:" " {
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL i)
        SETL endpointToo_l_obj:(toobjid)
        #CC "AdoScript" INFOBOX (endpointToo_l_obj)
        CC "Core" GET_CLASS_ID objid:(VAL endpointToo_l_obj)
        SETL endpoint_c_id:(classid)
        CC "Core" GET_CLASS_NAME classid:(VAL endpointToo_l_obj)
        SETL endpoint_c_name:(classname)
        #CC "AdoScript" INFOBOX (endpoint_c_name)
        IF (endpoint_c_name = "Pickup" OR endpoint_c_name = "Function" OR endpoint_c_name = "Storage" OR endpoint_c_name = "Waypoint") {
            SETG areaActual_o_obj:(endpointToo_l_obj)
        }
    }
}

#------------------------------#_____DYE the given object and move to it_____#------------------------------#

PROCEDURE global DYE_OBJECT integer:to_be_marked_o_obj {
    # "Find" the element that is to be executed. The benefit of FIND is that it also moves the view to the position of the element.
    # It is also used before the DYE so it doesn't automatically UNDYE the element.
        CC "Modeling" FIND objid:(to_be_marked_o_obj)
    # The DYE and UNDYE are useful to show where the execution has ended (e.g. when it ended prematurely).
    CC "Modeling" DYE (to_be_marked_o_obj) error-mark make-visible
    
}
  
#------------------------------#_____Create a delay_____#------------------------------#

PROCEDURE global MAKE_DELAY_MS integer:delay {
    SETL delay:((round(delay/10))*10)
    CC "AdoScript" SLEEP ms:(delay)
}


#------------------------------#_____Create a Ouput with Infos_____#------------------------------#

PROCEDURE global LOG_OUTPUT string:object1 object2:string {
  
    IF (object1 != "") {
        CC "Core" GET_CLASS_ID objid:(VAL object1)
        SETL object1_c_id:(classid)
        CC "Core" GET_CLASS_NAME classid:(VAL object1_c_id)
        SETL object1_c_name:(classname)

        CC "Core" GET_ATTR_ID classid:(VAL object1_c_id) attrname:"Name"
        SETL name_item_a_id:(attrid)
        CC "Core" GET_ATTR_VAL objid:(VAL object1) attrid:(name_item_a_id) as-string
        SETL object1_a_name:(val)

        CC "Application" GET_DATE_TIME date-format:"dd/mm/yyyy" time-format:"hh:mm:ss"
        SETL text_str:((object1_c_name) + " " + (object1_a_name) + " " + (date) + " " + (time) + "\n")

        CC "AdoScript" OUT winid:(robo_outputwin_str) text:(text_str)
    }
        IF (object2 != "") {
        CC "Core" GET_CLASS_ID objid:(VAL object2)
        SETL object2_c_id:(classid)
        CC "Core" GET_CLASS_NAME classid:(VAL object2_c_id)
        SETL object2_c_name:(classname)
    
        CC "Core" GET_ATTR_ID classid:(VAL object2_c_id) attrname:"Name"
        SETL name_item_a_id:(attrid)
        CC "Core" GET_ATTR_VAL objid:(VAL object2) attrid:(name_item_a_id) as-string
        SETL object2_a_name:(val)

        CC "Application" GET_DATE_TIME date-format:"dd/mm/yyyy" time-format:"hh:mm:ss"
        SETL text_str:((object2_c_name) + " " + (object2_a_name) + " " + (date) + " " + (time) + "\n")

        CC "AdoScript" OUT winid:(robo_outputwin_str) text:(text_str)
    }

}
#------------------------------#_____Clear a Ouput window_____#------------------------------#

PROCEDURE CLEAR_OUTPUT {
    CC "AdoScript" SET_OUT_MAX_LINE_COUNT 1
    CC "AdoScript" OUT winid:(robo_outputwin_str) text:("\n")
    CC "AdoScript" SET_OUT_MAX_LINE_COUNT 10000
}

#------------------------------#_____Determinate if a Item is inside the Pickup area_____#------------------------------#

PROCEDURE global FIND_ITEM_INSIDE_PICKUP integer:first_pickup_o_obj {
    #Here we get the position of the pickup area
    CC "Core" GET_ATTR_VAL objid:(first_pickup_o_obj) attrid:(pickup_position_a_id)
    SETL pickup_position_val:(val)
    LEO parse:(pickup_position_val) get-tmm-value:xp:"x" get-tmm-value:yp:"y" get-tmm-value:wp:"w" get-tmm-value:hp:"h"
    SETL xp:(CMS xp)
    SETL yp:(CMS yp)
    SETL wp:(CMS wp)
    SETL hp:(CMS hp)
    
    SETL xpwp: (xp + wp)
    SETL yphp: (yp + hp)

    #Here we get the positoin of the item 
    FOR i in:(item_l_obj) sep:" " {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrid:(item_position_a_id)
        SETL item_position_val:(val)
        LEO parse:(item_position_val) get-tmm-value:xi:"x" get-tmm-value:yi:"y" get-tmm-value:wi:"w" get-tmm-value:hi:"h"
        #Now we convert them
        SETL xi:(CMS xi)
        SETL yi:(CMS yi)
        SETL wi:(CMS wi)
        SETL hi:(CMS hi)
        SETL xiwi: (xi + wi)
        SETL yihi: (yi + hi)    
        #Let's compare item position with pickup position
        IF ((xp <= xi) AND (xpwp >= xi) AND 
            (yp <= yi) AND (yphp >= yi) AND
            (xp <= xiwi) AND (xpwp >= xiwi) AND
            (yp <= yihi) AND (yphp >= yihi)) {
            SETG item_inside_l_obj:(tokunion(item_inside_l_obj,(i), " "))
        }
        }
    }

#------------------------------#_____Pick up the item inside the pickup area_____#------------------------------#

PROCEDURE global PICKUP_ITEM_INSIDE_PICKUP string:proc_inside_l_obj {
    IF ((tokcnt(proc_inside_l_obj)) != 0) {
        CC "Core" GET_ATTR_VAL objid:(VAL proc_inside_l_obj) attrid:(item_position_a_id)
        SETL item_position_val:(val)
        LEO parse:(item_position_val) get-tmm-value:xi:"x" get-tmm-value:yi:"y" get-tmm-value:wi:"w" get-tmm-value:hi:"h"
        #Now we convert them
        SETL xi:(CMS xi)
        SETL yi:(CMS yi)
        SETL wi:(CMS wi)
        SETL hi:(CMS hi)
        SETL pickupX: (xi + (wi/2))
        SETL pickupY: (yi + (hi/2))

        SETG originalX_real:(REAL pickupX)
        SETG originalY_real:(REAL pickupY)

        SETL robo_call:("CC 'AdoScript' HTTP_REQUEST " + (STR home_position_str) + " verb:'POST'") 
        CC "AdoScript" INFOBOX (robo_call)

        #Robot coming in 

        SETL originalZ_real:(REAL(65))
        ROBOT_CALL (REAL originalX_real) y_to_call_real:(REAL originalY_real) z_to_call_real:(REAL originalZ_real)
        
        SETL originalZ_real:(REAL(-5))
        ROBOT_CALL (REAL originalX_real) y_to_call_real:(REAL originalY_real) z_to_call_real:(REAL originalZ_real)

        TURN_ON_OFF_SEDUCTION_DEVICE (STR "TRUE")
        
        SETL originalZ_real:(65)
        ROBOT_CALL (REAL originalX_real) y_to_call_real:(REAL originalY_real) z_to_call_real:(REAL originalZ_real)
        

    }
    ELSE {
        CC "AdoScript" INFOBOX ("empty")
    }
}

#------------------------------#_____Pick up the item inside the pickup area_____#------------------------------#

PROCEDURE global FUNCTION_AREA_ACTION integer:active_function_obj {

    #CC "AdoScript" INFOBOX (STR suctionA_l_id)
    #CC "AdoScript" INFOBOX (STR suctionB_l_id)
    #CC "AdoScript" INFOBOX (STR step_l_id)

    FOR i from:0 to:4 {
        
        CC "Core" GET_ATTR_VAL objid:(VAL active_function_obj) attrid:(VAL token(suctionA_l_id,VAL i," ")) as-string
        SETL suctionA_a_val:(val)
        TURN_ON_OFF_SEDUCTION_DEVICE (STR suctionA_a_val)

        FOR j from:1 to:3 {
            CC "Core" GET_REC_ATTR_ROW_ID objid:(VAL active_function_obj) attrid:(VAL token(step_l_id,VAL i," ")) index:(VAL j)
            SETL step_j_a_rowid:(rowid)

            IF (step_j_a_rowid != 0) {
                CC "Core" GET_ATTR_VAL objid:(VAL step_j_a_rowid) attrname:(x_step_name_str)
                SETL step_j_a_x_val:(val)
                SETG originalX_real:(REAL step_j_a_x_val)
                CC "Core" GET_ATTR_VAL objid:(VAL step_j_a_rowid) attrname:(y_step_name_str)
                SETL step_j_a_y_val:(val)
                SETG originalY_real:(REAL step_j_a_y_val)
                CC "Core" GET_ATTR_VAL objid:(VAL step_j_a_rowid) attrname:(z_step_name_str)
                SETL step_j_a_z_val:(val)
                SETG originalZ_real:(REAL step_j_a_z_val)
                ROBOT_CALL (REAL originalX_real) y_to_call_real:(REAL originalY_real) z_to_call_real:(REAL originalZ_real)
                
            }
        }
        CC "Core" GET_ATTR_VAL objid:(VAL active_function_obj) attrid:(VAL token(suctionB_l_id,VAL i," ")) as-string
        SETL suctionB_a_val:(val) 
        TURN_ON_OFF_SEDUCTION_DEVICE (STR suctionB_a_val)
    }
}


#------------------------------#_____Insert Item in Storage Area_____#------------------------------#

PROCEDURE global INSERT_ITEM_INTO_STORAGE_AREA integer:storage_o_obj item_to_store_l_obj:string {
    #Here we get the position of the pickup area
    CC "Core" GET_ATTR_VAL objid:(storage_o_obj) attrid:(storage_position_a_id)
    SETL storage_position_val:(val)
    LEO parse:(storage_position_val) get-tmm-value:xs:"x" get-tmm-value:ys:"y" get-tmm-value:ws:"w" get-tmm-value:hs:"h"
    SETL xs:(CMS xs)
    #CC "AdoScript" INFOBOX (xs)
    SETL ys:(CMS ys)
    #CC "AdoScript" INFOBOX (ys)
    SETL ws:(CMS ws)
    SETL hs:(CMS hs)
    
    SETL xsws: (xs + ws)
    SETL yshs: (ys + hs)

    CC "Modeling" DESELECT_ALL
    CC "Modeling" SELECT objid:(VAL item_to_store_l_obj) 
    SETG selected_item_o_obj:(VAL item_to_store_l_obj) 
    

    SETL ys:(ys-0.5) # it seems like the paste does +0.5 in the y axis...
    CC "Modeling" COPY_SELECTED 
    CC "Modeling" PASTE x:(CM xs) y:(CM ys)
    SETL pasted_object_o_obj:(pastedobjids) 
        
    CC "Core" GET_ATTR_VAL objid:(VAL pasted_object_o_obj) attrid:(item_position_a_id)
    SETL storage_position_val:(val)
    LEO parse:(storage_position_val) get-tmm-value:xs:"x" get-tmm-value:ys:"y" get-tmm-value:ws:"w" get-tmm-value:hs:"h"
    SETL xs:(CMS xs)
    SETL ys:(CMS ys)
    SETL ws:(CMS ws)
    SETL hs:(CMS hs)
    
    SETL xsws: (xs + ws)
    SETL yshs: (ys + hs)

    SETG originalX_real:(REAL xsws)
    SETG originalY_real:(REAL yshs)

    #Robot coming in 

    SETL originalZ_real:(REAL(65))
    ROBOT_CALL (REAL originalX_real) y_to_call_real:(REAL originalY_real) z_to_call_real:(REAL originalZ_real)
        
    SETL originalZ_real:(REAL(-5))
    ROBOT_CALL (REAL originalX_real) y_to_call_real:(REAL originalY_real) z_to_call_real:(REAL originalZ_real)

    TURN_ON_OFF_SEDUCTION_DEVICE (STR "FALSE")
        
    SETL originalZ_real:(65)
    ROBOT_CALL (REAL originalX_real) y_to_call_real:(REAL originalY_real) z_to_call_real:(REAL originalZ_real)

}

#------------------------------#_____Delete Item in Pickup Area_____#------------------------------#

PROCEDURE global DELETE_ITEM_IN_PICKUP_AREA integer:item_in_storage_o_obj {

    CC "Core" DELETE_OBJS modelid:(activeModelId) objids:(STR item_in_storage_o_obj)
    #CC "Modeling" debug REBUILD_DRAWING_AREA modelid:(VAL activeModelId)

}


#------------------------------#_____Delete Item in Pickup Area_____#------------------------------#

PROCEDURE global WAYPOINT_AREA_ACTION integer:waypoint_l_obj {
    
    CC "Core" GET_ATTR_VAL objid:(waypoint_l_obj) attrid:(waypoint_position_a_id)
    SETL waypoint_position_val:(val)
    LEO parse:(waypoint_position_val) get-tmm-value:xs:"x" get-tmm-value:ys:"y" get-tmm-value:ws:"w" get-tmm-value:hs:"h"
    SETL xs:(CMS xs)
    SETL ys:(CMS ys)
    SETL ws:(CMS ws)
    SETL hs:(CMS hs)
    
    SETL xsws: (xs + (ws/2))
    SETL yshs: (ys + (hs/2))

    SETG originalX_real:(REAL xsws)
    SETG originalY_real:(REAL yshs)

    SETL originalZ_real:(65)
    ROBOT_CALL (REAL originalX_real) y_to_call_real:(REAL originalY_real) z_to_call_real:(REAL originalZ_real)

}


#------------------------------#_____Find relevant Robot_____#------------------------------#

PROCEDURE global FIND_RELEVANT_ROBOT {

    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Robot"
    SETL robot_l_obj:(objids)
    CC "Core"  GET_CLASS_ID classname:"Robot"
    SETL robot_c_id:(classid)
    CC "Core" GET_ATTR_ID classid:(robot_c_id) attrname:"Relevant Robot"
    SETL relevant_robot_a_id:(attrid)

    FOR i in:(robot_l_obj) sep:" " {
        
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrid:(relevant_robot_a_id)
        SETL relevant_robot_a_val:(val)

        IF (VAL relevant_robot_a_val = 1) {
            SETG relevantRobot_o_obj:(tokunion(relevantRobot_o_obj,(i), " "))
        }

    }

}




#------------------------------#_____Find Robot position and set it as default_____#------------------------------#

PROCEDURE global ROBO_POSITION integer:used_robot_o_obj {
    
    CC "Core" GET_ATTR_VAL objid:(used_robot_o_obj) attrid:(robot_position_a_id)
    SETL robot_position_val:(val)
    LEO parse:(robot_position_val) get-tmm-value:xr:"x" get-tmm-value:yr:"y" 
    SETL xr:(CMS xr)
    SETL yr:(CMS yr)

    SETG robo_middle_x_real: (REAL xr)
    SETG robo_middle_y_real: (REAL yr)

    #CC "Core" GET_ATTR_VAL objid:(used_robot_o_obj) attrid:(robot_rangeMax_a_id)
    #SETL robot_rangeMax_val:(val)
    


    #SETG robo_middle_x_real: (REAL(xr +  robot_rangeMax_val))
    #SETG robo_middle_y_real: (REAL(yr +  robot_rangeMax_val))
    
}

#------------------------------#_____Find Robot position and set it as default_____#------------------------------#

PROCEDURE global CONVERT_POSITION_IN_RELATION_TO_ROBOT real:x_to_convert y_to_convert:real z_to_convert:real {
    
    SETG convertedX_real:(x_to_convert-robo_middle_x_real)
    SETG convertedY_real:(y_to_convert-robo_middle_y_real)
    SETG convertedZ_real:(z_to_convert-65)

    #Manual rounding to avoid errors

    SETG convertedX_real:(INT(convertedX_real*10))
    SETG convertedX_real:(convertedX_real/10)

    SETG convertedY_real:(INT(convertedY_real*10))
    SETG convertedY_real:(convertedY_real/10)

    SETG convertedZ_real:(INT(convertedZ_real*10)) 
    SETG convertedZ_real:(convertedZ_real/10)

    #Change axis, to match the robot
    SETL placeholderX:(convertedX_real)
    SETL placeholderY:(convertedY_real)
    SETG convertedX_real:(placeholderY)
    SETG convertedY_real:(placeholderX)
    
}

#------------------------------#_____Turn on/off seduction device_____#------------------------------#

PROCEDURE global TURN_ON_OFF_SEDUCTION_DEVICE string:action_device_int {
    
    IF (action_device_int = "TRUE") {
        SETL robo_call:("CC 'AdoScript' HTTP_REQUEST + " + (STR turn_on_str) + " + verb:'POST'")
        CC "AdoScript" INFOBOX (robo_call)
    }
    IF (action_device_int = "FALSE") {
        SETL robo_call:("CC 'AdoScript' HTTP_REQUEST + " + (STR turn_off_str) + " + verb:'POST'")
        CC "AdoScript" INFOBOX (robo_call)    
    }

}

PROCEDURE global ROBOT_CALL real:x_to_call_real y_to_call_real:real z_to_call_real:real {

    #CC "AdoScript" INFOBOX (x_to_call_real)
    #CC "AdoScript" INFOBOX (y_to_call_real)
    #CC "AdoScript" INFOBOX (z_to_call_real)
    
    CONVERT_POSITION_IN_RELATION_TO_ROBOT (REAL x_to_call_real) y_to_convert:(REAL y_to_call_real) z_to_convert:(REAL z_to_call_real)

    #CC "AdoScript" INFOBOX (convertedX_real)
    #CC "AdoScript" INFOBOX (convertedY_real)
    #CC "AdoScript" INFOBOX (convertedZ_real)

    SETL robo_call:("" + (STR urlMove_str) + " + 'x=' + " + (STR convertedX_real) + " + '&y=' + " + (STR convertedY_real) + " + '&z=' + " + (STR convertedZ_real) + "")
    CC "AdoScript" INFOBOX (robo_call)
    
}


#------------------------------#_____Final code_____#------------------------------#

#Min Radius is 18.6cm and max is 31.3cm. X and Y axis are changed!

#LOG_OUTPUT (STR eventActual_o_obj) object2:(STR "")
#LOG_OUTPUT (STR eventActual_o_obj) object2:(STR areaActual_o_obj)

#MAKE_DELAY_MS 500

FIND_RELEVANT_ROBOT
ROBO_POSITION (VAL relevantRobot_o_obj)
CLEAR_OUTPUT
FIND_START_EVENT
FIND_AREA_FOR_ACTUAL_EVENT
LOG_OUTPUT (STR eventActual_o_obj) object2:(STR areaActual_o_obj)
DYE_OBJECT (VAL eventActual_o_obj)
DYE_OBJECT (VAL areaActual_o_obj)
FIND_ITEM_INSIDE_PICKUP (VAL areaActual_o_obj)
PICKUP_ITEM_INSIDE_PICKUP (STR item_inside_l_obj)
FIND_NEXT_EVENT

WHILE ((VAL eventNext_o_obj) != (VAL eventActual_o_obj)) {
    
    SETG eventActual_o_obj:(eventNext_o_obj)
    
    FIND_AREA_FOR_ACTUAL_EVENT
    
    LOG_OUTPUT (STR eventActual_o_obj) object2:(STR areaActual_o_obj)
    
    DYE_OBJECT (VAL eventActual_o_obj)
    DYE_OBJECT (VAL areaActual_o_obj) 

    CC "Core" GET_CLASS_ID objid:(VAL areaActual_o_obj)
    SETL areaActual_classid_int:(VAL classid)

    CC "Core" GET_CLASS_NAME classid:(VAL areaActual_classid_int)
    SETL areaActual_classname_str:(STR classname)

    IF (classname = "Function") {
        FUNCTION_AREA_ACTION (VAL areaActual_o_obj)
        CC "AdoScript" INFOBOX ("function")
    }
    IF (classname = "Waypoint") {
        WAYPOINT_AREA_ACTION (VAL areaActual_o_obj)
        CC "AdoScript" INFOBOX ("waypoint")
    }
    IF (classname = "Storage") {
        INSERT_ITEM_INTO_STORAGE_AREA (VAL areaActual_o_obj) item_to_store_l_obj:(STR item_inside_l_obj)
        DELETE_ITEM_IN_PICKUP_AREA (VAL selected_item_o_obj)
        CC "AdoScript" INFOBOX ("storage")
    }

    FIND_NEXT_EVENT
}



#MAKE_DELAY_MS 500

#SETG eventNext_o_obj:(endpointToo_l_obj)

(*)

FIND_NEXT_EVENT
SETG eventActual_o_obj:(eventNext_o_obj)
FIND_AREA_FOR_ACTUAL_EVENT
DYE_OBJECT (VAL eventActual_o_obj)
DYE_OBJECT (VAL areaActual_o_obj)   
FUNCTION_AREA_ACTION (VAL areaActual_o_obj)

#MAKE_DELAY_MS 500
FIND_NEXT_EVENT
SETG eventActual_o_obj:(eventNext_o_obj)
FIND_AREA_FOR_ACTUAL_EVENT
DYE_OBJECT (VAL eventActual_o_obj)
DYE_OBJECT (VAL areaActual_o_obj)
WAYPOINT_AREA_ACTION (VAL areaActual_o_obj)

#MAKE_DELAY_MS 500
FIND_NEXT_EVENT
SETG eventActual_o_obj:(eventNext_o_obj)
FIND_AREA_FOR_ACTUAL_EVENT
DYE_OBJECT (VAL eventActual_o_obj)
DYE_OBJECT (VAL areaActual_o_obj)
INSERT_ITEM_INTO_STORAGE_AREA (VAL areaActual_o_obj) item_to_store_l_obj:(STR item_inside_l_obj)
DELETE_ITEM_IN_PICKUP_AREA (VAL selected_item_o_obj)

(*)




#CC "AdoScript" INFOBOX ("original x " + STR (INT originalX_real))
#CC "AdoScript" INFOBOX (originalX_real)
#CC "AdoScript" INFOBOX ("original y " + STR (INT originalY_real))
#CC "AdoScript" INFOBOX (originalY_real)

#CC "AdoScript" INFOBOX ("converted x " + STR (INT convertedX_real))
#CC "AdoScript" INFOBOX (convertedX_real)
#CC "AdoScript" INFOBOX ("converted y " + STR (INT convertedY_real))
#CC "AdoScript" INFOBOX (convertedY_real)

(*)

SETG urlMove_str: "http://10.0.6.41:8080/dobot/api/operation/moveToPosition?"
SETG home_position_str: "http://10.0.6.41:8080/dobot/api/operation/moveToHomePosition"
SETG turn_on_str: "http://10.0.6.41:8080/dobot/api/operation/turnOnSuctionCup"
SETG turn_off_str: "http://10.0.6.41:8080/dobot/api/operation/turnOffSuctionCup"


SET urlX: (STR (298 - ((robotX-1)*16)))
SET urlY: (STR (-96 + ((roboY-1)*27)))
SET zDefault:"0"
SET zPickup:"-71"
SET zDrop:"-60"

SET home_position: "http://10.0.6.41:8080/dobot/api/operation/moveToHomePosition"
SET turn_on: "http://10.0.6.41:8080/dobot/api/operation/turnOnSuctionCup"
SET turn_off: "http://10.0.6.41:8080/dobot/api/operation/turnOffSuctionCup"

SET movelURL: (urlMove + "x=" + urlX + "&y=" + urlY + "&z=" + zDefault)

SET movelURL: (urlMove + "x=" + urlX + "&y=" + urlY + "&z=" + zDefault)
#CC "AdoScript" HTTP_REQUEST (movelURL) verb:"POST" 
#CC "AdoScript" INFOBOX (movelURL) 
SET movelURL: (urlMove + "x=" + urlX + "&y=" + urlY + "&z=" + zDrop)
#CC "AdoScript" HTTP_REQUEST (movelURL) verb:"POST" 
#CC "AdoScript" INFOBOX (movelURL) 
#CC "AdoScript" HTTP_REQUEST (turn_off) verb:"POST" 
#CC "AdoScript" INFOBOX (turn_off) 
SET movelURL: (urlMove + "x=" + urlX + "&y=" + urlY + "&z=" + zDefault)
#CC "AdoScript" HTTP_REQUEST (movelURL) verb:"POST" 
#CC "AdoScript" INFOBOX (movelURL)
(*)

(*)
CLEAR_OUTPUT
FIND_START_EVENT
FIND_NEXT_EVENT
FIND_AREA_FOR_ACTUAL_EVENT
DYE_OBJECT
MAKE_DELAY_MS
LOG_OUTPUT
CC "Modeling" UNDYE_ALL modelid:(activeModelId)
FIND_ITEM_INSIDE_PICKUP
PICKUP_ITEM_INSIDE_PICKUP
FUNCTION_AREA_ACTION
#EXECUTE_STORAGE_AREA
#CREATE_ITEM
#DELETE_ITEM
(*)


#CC "AdoScript" INFOBOX (eventActual_o_obj)
#CC "AdoScript" INFOBOX (eventNext_o_obj)
#CC "AdoScript" INFOBOX (areaActual_o_obj)


(*)

TODO: 

Pickup -> random picking order or select which first?


(*)


#------------------------------#_____exampel_____#------------------------------#
(*)
# get all selected objects
CC "Modeling" GET_SELECTED
IF (objids = "")
{
   CC "AdoScript" ERRORBOX "Select a connector first!"
   EXIT
}


# from the list of selected objects, extract the first objectid
SET firstselected:(token(objids,0," "))

# now the all from and to instance
CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL firstselected)
IF (ecode != 0)
{
   CC "AdoScript" ERRORBOX "Select a connector first!"
   EXIT
}

# now get the classes of the connected instances
CC "Core" GET_CLASS_ID objid:(fromobjid)
SET fromclassid:(classid)
CC "Core" GET_CLASS_ID objid:(toobjid)
SET toclassid:(classid)

# now get the names of the classes
CC "Core" GET_CLASS_NAME classid:(fromclassid)
SET fromclassname:(classname)
CC "Core" GET_CLASS_NAME classid:(toclassid)
SET toclassname:(classname)

# display the result
CC "AdoScript" INFOBOX ("You connected a " + fromclassname + " with a " + toclassname + ".")
