# Version: 1.0.0
# Date: ....
# Author: Daniel von KÃ¤nel

(*
Possible dependencies: 
ASC_GlobalFunctions_Conversion (1.8, startup)
ASC_GlobalFunctions_MapSupport (1.8, startup)
ASC_GlobalFunctions_StringSupport (1.8, startup)
ASC_GlobalFunctions_JSON (1.8, startup)
ASC_GlobalProcedures_ExecuteFlowchart
ASC_GlobalProcedures_ExecAttrProf-beeup
ASC_GlobalVariables_FC
ASC_HttpRequestDll

Startup:
    EXECUTE file:("db:\\ASC_GlobalFunctions_Conversion.asc")
    EXECUTE file:("db:\\ASC_GlobalFunctions_DateTime.asc")
    EXECUTE file:("db:\\ASC_GlobalFunctions_JSON.asc")
    EXECUTE file:("db:\\ASC_GlobalFunctions_MapSupport.asc")
    EXECUTE file:("db:\\ASC_GlobalFunctions_RandomDistributions.asc")
    EXECUTE file:("db:\\ASC_GlobalFunctions_StringSupport.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_AutoStart.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_CloneUI.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_Cloning.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_ConfigFiles.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_Logging.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_ExecAsc.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_ExecAttrProf.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_ExtensionManagement.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_RecordSupport.asc")
    EXECUTE file:("db:\\ASC_Bridge_HttpRequestDll.asc") # Kept for backwards compatibility
    EXECUTE file:("db:\\ASC_OliveIntegration_GlobalProcedures.asc")

############---------------- MY CODE ----------------############
    CC "AdoScript" FREAD file:"C:\\Users\\Daniel\\Documents\\GitHub\\metamodeling\\1_MA_dep.asc"
    EXECUTE (text)
############---------------- MY CODE ----------------############

*)

# TODO: 
(*
Could be useful
    val_fc_delay
    val_fc_printtimes
    val_fc_highlight
*) 

#------------------------------#_____get active model_____#------------------------------#

# Get and store the model id. It is also used for other things beside the output windows.
CC "Modeling" GET_ACT_MODEL
IF (ecode <> 0) {
  CC "AdoScript" ERRORBOX ("Encountered an error while trying to read the model information. Stopping script now.")
  EXIT
}
CC "Core" LOAD_MODEL (activeModelId)
SETG activeModelId: (modelid)

#------------------------------#_____get default information_____#------------------------------#

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Event"
SETL event_c_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Event"
SETL event_c_id:(classid)


CC "Core" GET_ATTR_ID classid:(event_c_id) attrname:"start"
SETL start_a_id:(attrid)

(*)(*)

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Intermediate"
SETL intermediate_c_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Intermediate"
SETL intermediate_c_id:(classid)
(*)
CC "Core" GET_ATTR_ID classid:(event_c_id) attrname:"Attribute X"
SETL x_a_id:(attrid)
(*)

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Pickup"
SETL pickup_c_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Pickup"
SETL pickup_c_id:(classid)
(*)
CC "Core" GET_ATTR_ID classid:(event_c_id) attrname:"Attribute X"
SETL x_a_id:(attrid)
(*)

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Function"
SETL function_c_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Function"
SETL function_c_id:(classid)
(*)
CC "Core" GET_ATTR_ID classid:(event_c_id) attrname:"Attribute X"
SETL x_a_id:(attrid)
(*)

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Storage"
SETL storage_c_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Storage"
SETL storage_c_id:(classid)
(*)
CC "Core" GET_ATTR_ID classid:(event_c_id) attrname:"Attribute X"
SETL x_a_id:(attrid)
(*)

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Waypoint"
SETL waypoint_c_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Waypoint"
SETL waypoint_c_id:(classid)
(*)
CC "Core" GET_ATTR_ID classid:(event_c_id) attrname:"Attribute X"
SETL x_a_id:(attrid)
(*)

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Item"
SETL item_c_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Item"
SETL item_c_id:(classid)
(*)
CC "Core" GET_ATTR_ID classid:(event_c_id) attrname:"Attribute X"
SETL x_a_id:(attrid)
(*)


#------------------------------#_____make some preparations_____#------------------------------#

# Remove any previous dyes if there are any in the model
CC "Modeling" UNDYE_ALL modelid:(activeModelId)

# Here we round the provided delay to a value the script can handle: the amount of 100ms sleeps
#TODO: correct val_delay
#SETL val_delay:(round(val_delay*10))

#------------------------------#_____prepare some attributes_____#------------------------------#

SETG eventActual_o_obj:""
SETG eventNext_o_obj:""
SETG areaActual_o_obj:""

#------------------------------#_____get start of event_____#------------------------------#

#here we find the start element and set eventActual_o_obj
PROCEDURE global FIND_START_EVENT {
    FOR i in:(event_c_obj) sep:" " {
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrid:(start_a_id) attrname:"start"
    SETL start_a_val:(val)
    
    IF (start_a_val = 1) {
        SETG eventActual_o_obj: (i)
    }
}
}


(*)TODO: If there is more than one 1 start available, 
        we should be able to get a box to chose which start we want to take. 
(*)


#------------------------------#_____find next event_____#------------------------------#

#here we find the next event and set eventNext_o_obj
PROCEDURE global FIND_NEXT_EVENT {  
    CC "Core" GET_CONNECTORS objid:(VAL eventActual_o_obj) out
    SETL connector_l_obj:(objids)

    CC "Core" GET_CONNECTORS objid:(VAL eventActual_o_obj) out
    SETL connector_l_obj:(objids)

    FOR i in:(connector_l_obj) sep:" " {
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL i)
        SETL endpointToo_l_obj:(toobjid)
        #CC "AdoScript" INFOBOX (endpointToo_l_obj)
        CC "Core" GET_CLASS_ID objid:(VAL endpointToo_l_obj)
        SETL endpoint_c_id:(classid)
        CC "Core" GET_CLASS_NAME classid:(VAL endpointToo_l_obj)
        SETL endpoint_c_name:(classname)
        #CC "AdoScript" INFOBOX (endpoint_c_name)
        IF (endpoint_c_name = "Event" OR endpoint_c_name = "Intermediate") {
            SETG eventNext_o_obj:(endpointToo_l_obj)
        }
    }
}
#------------------------------#_____find actual area_____#------------------------------#

#here we find the area for actual event and set areaActual_o_obj
PROCEDURE global FIND_AREA_FOR_ACTUAL_EVENT {  
    CC "Core" GET_CONNECTORS objid:(VAL eventActual_o_obj) out
    SETL connector_l_obj:(objids)

    CC "Core" GET_CONNECTORS objid:(VAL eventActual_o_obj) out
    SETL connector_l_obj:(objids)

    FOR i in:(connector_l_obj) sep:" " {
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL i)
        SETL endpointToo_l_obj:(toobjid)
        #CC "AdoScript" INFOBOX (endpointToo_l_obj)
        CC "Core" GET_CLASS_ID objid:(VAL endpointToo_l_obj)
        SETL endpoint_c_id:(classid)
        CC "Core" GET_CLASS_NAME classid:(VAL endpointToo_l_obj)
        SETL endpoint_c_name:(classname)
        #CC "AdoScript" INFOBOX (endpoint_c_name)
        IF (endpoint_c_name = "Pickup" OR endpoint_c_name = "Function" OR endpoint_c_name = "Storage") {
            SETG areaActual_o_obj:(endpointToo_l_obj)
        }
    }
}


#------------------------------#_____Final code_____#------------------------------#

#FIND_START_EVENT
#FIND_NEXT_EVENT
#FIND_AREA_FOR_ACTUAL_EVENT

#CC "AdoScript" INFOBOX (eventActual_o_obj)
#CC "AdoScript" INFOBOX (eventNext_o_obj)
#CC "AdoScript" INFOBOX (areaActual_o_obj)


(*)
TODO:

#EXECUTE_PICKUP_AREA
#EXECUTE_FUNCTION_AREA
#EXECUTE_STORAGE_AREA
#CREATE_ITEM
#DELETE_ITEM
#DYE 
#UNDYE
#TIMESTAMP
#DELAY

(*)


#------------------------------#_____exampel_____#------------------------------#
(*)
# get all selected objects
CC "Modeling" GET_SELECTED
IF (objids = "")
{
   CC "AdoScript" ERRORBOX "Select a connector first!"
   EXIT
}


# from the list of selected objects, extract the first objectid
SET firstselected:(token(objids,0," "))

# now the all from and to instance
CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL firstselected)
IF (ecode != 0)
{
   CC "AdoScript" ERRORBOX "Select a connector first!"
   EXIT
}

# now get the classes of the connected instances
CC "Core" GET_CLASS_ID objid:(fromobjid)
SET fromclassid:(classid)
CC "Core" GET_CLASS_ID objid:(toobjid)
SET toclassid:(classid)

# now get the names of the classes
CC "Core" GET_CLASS_NAME classid:(fromclassid)
SET fromclassname:(classname)
CC "Core" GET_CLASS_NAME classid:(toclassid)
SET toclassname:(classname)

# display the result
CC "AdoScript" INFOBOX ("You connected a " + fromclassname + " with a " + toclassname + ".")
