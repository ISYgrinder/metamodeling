# Version: 1.0.0
# Date: 2021-09-07

# This file contains global (lambda) functions which help working with maps.


### Direct Dependencies: None



#------------------------------------------------------------------------------
FUNCTION mapKeysArray:global map_value:map
# Determines all the keys used in the map and returns them in an array.
# This is probably the safest of all the functions because it properly
# distinguishes the keys, works with every type of key and also preserves the
# type.
#
# map_value - IN - the map for which to get key information for.
#
# Example usage:
#   mapKeysArray(myMap)
#------------------------------------------------------------------------------
return:(
  set(arr_keyset, array(LEN map_value)),
  for(val_index, 0, (LEN map_value)-1,
    set(arr_keyset[val_index], map_value.key(val_index)),
    arr_keyset)
)



#------------------------------------------------------------------------------
FUNCTION mapKeysTypes:global map_value:map
# Determines the different types used by the keys in the map and returns them
# as a list.
# More specifically it returns a string containing the keys' types, which are
# separated by the " " character.
#
# map_value - IN - the map for which to get key information for.
#
# Example usage:
#   mapKeysTypes(myMap)
#------------------------------------------------------------------------------
return:(
  set(str_keytypes, ""),
  for(val_index, 0, (LEN map_value)-1,
    set(str_keytypes, tokunion(str_keytypes, type(map_value.key(val_index)))),
    str_keytypes)
)



#------------------------------------------------------------------------------
FUNCTION mapKeysList:global map_value:map
# Determines all the keys used in the map and returns them in a list.
# More specifically it returns a string containing the keys, which are
# separated by the "~" character. As such the keys should not contain the "~"
# character, otherwise it will be split into different tokens in the list.
# The used keys in the map must be of type string, otherwise this function will
# result in an error. The function mapKeysTypes(...) can be used to check the
# types used by the keys or the function try(..., ...) can be used to catch the
# error and handle it.
#
# map_value - IN - the map for which to get key information for.
#
# Example usage:
#   mapKeysList(myMap)
#------------------------------------------------------------------------------
return:(
  set(str_keyset, ""),
  for(val_index, 0, (LEN map_value)-1,
    set(str_keyset, tokcat(str_keyset, map_value.key(val_index), "~")),
    str_keyset)
)



#------------------------------------------------------------------------------
FUNCTION mapKeysTypedList:global map_value:map
# Determines all the keys used in the map and returns them in a list.
# More specifically it returns a string containing the keys, which are 
# separated by the "~" character.
# The values in the list are such that they reflect their type (e.g. strings 
# are put in quotation marks) so they can be transformed into the correct value
# (string or number) using eval(...). Note that using eval(...) in an INFOBOX
# seems to lead to an error (asleo-84).
#
# map_value - IN - the map for which to get key information for.
#
# Example usage:
#   mapKeysTypedList(myMap)
#------------------------------------------------------------------------------
return:(
  set(str_keyset, ""),
  for(val_index, 0, (LEN map_value)-1, (
      set(any_temp, map_value.key(val_index)),
      set(str_keytype, type(any_temp)),
      cond(str_keytype = "string", set(str_keyset, tokcat(str_keyset, "\"" + any_temp + "\"", "~")),
        set(str_keyset, tokcat(str_keyset, STR any_temp, "~")))),
    str_keyset)
)



#------------------------------------------------------------------------------
FUNCTION mapValuesArray:global map_value:map
# Determines all the values in the map and returns them in an array.
# This function properly distinguishes the values, works with every type of
# value and also preserves the type.
#
# map_value - IN - the map for which to get the values for.
#
# Example usage:
#   mapValuesArray(myMap)
#------------------------------------------------------------------------------
return:(
  set(arr_valueset, array(LEN map_value)),
  for(val_index, 0, (LEN map_value)-1,
    set(arr_valueset[val_index], map_value[map_value.key(val_index)]),
    arr_valueset)
)



#------------------------------------------------------------------------------
# SETG mapAddToKey:(lambda(map_value, key, value, (
#   cond(type(map_value[key]) = "array", (
#       set(temparray, map_value[key]),
#       aappend(temparray, value),
#       set(map_value[key], temparray)),
#     type(map_value[key]) <> "undefined",
#     set(map_value[key], {map_value[key], value}),
#     0), # Here we would just "set" the value under the key, but that causes a crash.
#   map_value
# )))
### NOTE: this unfortunately doesn't work, because using "set(...)" to add a
# new key to the map causes a crash.
#
# Adds a value to the map under a specific key.
# If the current value under that key is an array, then the provided value is
# appended to that array. Otherwise it changes the value for the key to be an
# array with two elements: the current value and the provided value.
# If the map does not contain the key yet then it doesn't add it, because that
# causes a crash.
#
# map_value - IN - the map for which to get key information for.
# key - IN - the key where to add the value to.
# value - IN - the provided value to add to the key.
#
# Example usage:
#   SETL mymap:(mapAddToKey(mymap, thekey, avalue))
#------------------------------------------------------------------------------