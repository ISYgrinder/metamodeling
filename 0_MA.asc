# Version: 1.0.0
# Date: ....
# Author: Daniel von KÃ¤nel

(*
Possible dependencies: 
ASC_GlobalFunctions_Conversion (1.8, startup)
ASC_GlobalFunctions_MapSupport (1.8, startup)
ASC_GlobalFunctions_StringSupport (1.8, startup)
ASC_GlobalFunctions_JSON (1.8, startup)
ASC_GlobalProcedures_ExecuteFlowchart
ASC_GlobalProcedures_ExecAttrProf-beeup
ASC_GlobalVariables_FC
ASC_HttpRequestDll

Startup:
    EXECUTE file:("db:\\ASC_GlobalFunctions_Conversion.asc")
    EXECUTE file:("db:\\ASC_GlobalFunctions_DateTime.asc")
    EXECUTE file:("db:\\ASC_GlobalFunctions_JSON.asc")
    EXECUTE file:("db:\\ASC_GlobalFunctions_MapSupport.asc")
    EXECUTE file:("db:\\ASC_GlobalFunctions_RandomDistributions.asc")
    EXECUTE file:("db:\\ASC_GlobalFunctions_StringSupport.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_AutoStart.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_CloneUI.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_Cloning.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_ConfigFiles.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_Logging.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_ExecAsc.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_ExecAttrProf.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_ExtensionManagement.asc")
    EXECUTE file:("db:\\ASC_GlobalProcedures_RecordSupport.asc")
    EXECUTE file:("db:\\ASC_Bridge_HttpRequestDll.asc") # Kept for backwards compatibility
    EXECUTE file:("db:\\ASC_OliveIntegration_GlobalProcedures.asc")

############---------------- MY CODE ----------------############
    CC "AdoScript" FREAD file:"C:\\Users\\Daniel\\Documents\\GitHub\\metamodeling\\1_MA_dep.asc"
    EXECUTE (text)
############---------------- MY CODE ----------------############

*)

# TODO: 
(*
Could be useful
    val_fc_delay
    val_fc_printtimes
    val_fc_highlight
*) 

#------------------------------#_____get active model_____#------------------------------#

# Get and store the model id. It is also used for other things beside the output windows.
CC "Modeling" GET_ACT_MODEL
IF (ecode <> 0) {
  CC "AdoScript" ERRORBOX ("Encountered an error while trying to read the model information. Stopping script now.")
  EXIT
}
CC "Core" LOAD_MODEL (activeModelId)
SETG activeModelId: (modelid)

#------------------------------#_____get default information_____#------------------------------#

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Event"
SETL event_l_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Event"
SETL event_c_id:(classid)


CC "Core" GET_ATTR_ID classid:(event_c_id) attrname:"start"
SETL start_a_id:(attrid)

(*)(*)

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Intermediate"
SETL intermediate_l_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Intermediate"
SETL intermediate_c_id:(classid)
(*)
CC "Core" GET_ATTR_ID classid:(event_c_id) attrname:"Attribute X"
SETL x_a_id:(attrid)
(*)

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Pickup"
SETL pickup_l_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Pickup"
SETL pickup_c_id:(classid)

CC "Core" GET_ATTR_ID classid:(pickup_c_id) attrname:"Position"
SETL pickup_position_a_id:(attrid)


CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Function"
SETL function_l_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Function"
SETL function_c_id:(classid)
(*)
CC "Core" GET_ATTR_ID classid:(event_c_id) attrname:"Attribute X"
SETL x_a_id:(attrid)
(*)

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Storage"
SETL storage_l_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Storage"
SETL storage_c_id:(classid)
(*)
CC "Core" GET_ATTR_ID classid:(event_c_id) attrname:"Attribute X"
SETL x_a_id:(attrid)
(*)

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Waypoint"
SETL waypoint_l_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Waypoint"
SETL waypoint_c_id:(classid)
(*)
CC "Core" GET_ATTR_ID classid:(event_c_id) attrname:"Attribute X"
SETL x_a_id:(attrid)
(*)
    

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Item"
SETL item_l_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Item"
SETL item_c_id:(classid)

CC "Core" GET_ATTR_ID classid:(item_c_id) attrname:"Position"
SETL item_a_id:(attrid)



#------------------------------#_____prepare some attributes_____#------------------------------#
#------------------------------#_____prepare some attributes_____#------------------------------#
#------------------------------#_____prepare some attributes_____#------------------------------#


SETG eventActual_o_obj:""
SETG eventNext_o_obj:""
SETG areaActual_o_obj:""
SETG delay_val:(0.0)

SETG robo_outputwin_str:("Robo")
SETG robo_outputwin_str_debug:("Robo - debug")


#------------------------------#_____make some preparations_____#------------------------------#

# Remove any previous dyes if there are any in the model
CC "Modeling" UNDYE_ALL modelid:(activeModelId)

CC "AdoScript" CLOSE_DOCKABLE_WINDOW winid:(robo_outputwin_str)
CC "AdoScript" CLOSE_DOCKABLE_WINDOW winid:(robo_outputwin_str_debug)

CC "Core" GET_MODEL_INFO modelid:(activeModelId)
SETG modelname_str_obj:(modelname)
SETG version_str_obj:(ver)

CC "AdoScript" CREATE_OUTPUT_WIN winid:(robo_outputwin_str) title:(robo_outputwin_str + " - " + modelname_str_obj  + " " + version_str_obj)   

#------------------------------#_____get start of event_____#------------------------------#

#here we find the start element and set eventActual_o_obj
PROCEDURE global FIND_START_EVENT {
    FOR i in:(event_l_obj) sep:" " {
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrid:(start_a_id) attrname:"start"
    SETL start_a_val:(val)
    
    IF (start_a_val = 1) {
        SETG eventActual_o_obj: (i)
    }
}
}


(*)TODO: If there is more than one 1 start available, 
        we should be able to get a box to chose which start we want to take. 
(*)


#------------------------------#_____find next event_____#------------------------------#

#here we find the next event and set eventNext_o_obj
PROCEDURE global FIND_NEXT_EVENT {  
    CC "Core" GET_CONNECTORS objid:(VAL eventActual_o_obj) out
    SETL connector_l_obj:(objids)

    CC "Core" GET_CONNECTORS objid:(VAL eventActual_o_obj) out
    SETL connector_l_obj:(objids)

    FOR i in:(connector_l_obj) sep:" " {
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL i)
        SETL endpointToo_l_obj:(toobjid)
        #CC "AdoScript" INFOBOX (endpointToo_l_obj)
        CC "Core" GET_CLASS_ID objid:(VAL endpointToo_l_obj)
        SETL endpoint_c_id:(classid)
        CC "Core" GET_CLASS_NAME classid:(VAL endpointToo_l_obj)
        SETL endpoint_c_name:(classname)
        #CC "AdoScript" INFOBOX (endpoint_c_name)
        IF (endpoint_c_name = "Event" OR endpoint_c_name = "Intermediate") {
            SETG eventNext_o_obj:(endpointToo_l_obj)
        }
    }
}
#------------------------------#_____find actual area_____#------------------------------#

#here we find the area for actual event and set areaActual_o_obj
PROCEDURE global FIND_AREA_FOR_ACTUAL_EVENT {  
    CC "Core" GET_CONNECTORS objid:(VAL eventActual_o_obj) out
    SETL connector_l_obj:(objids)

    CC "Core" GET_CONNECTORS objid:(VAL eventActual_o_obj) out
    SETL connector_l_obj:(objids)

    FOR i in:(connector_l_obj) sep:" " {
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL i)
        SETL endpointToo_l_obj:(toobjid)
        #CC "AdoScript" INFOBOX (endpointToo_l_obj)
        CC "Core" GET_CLASS_ID objid:(VAL endpointToo_l_obj)
        SETL endpoint_c_id:(classid)
        CC "Core" GET_CLASS_NAME classid:(VAL endpointToo_l_obj)
        SETL endpoint_c_name:(classname)
        #CC "AdoScript" INFOBOX (endpoint_c_name)
        IF (endpoint_c_name = "Pickup" OR endpoint_c_name = "Function" OR endpoint_c_name = "Storage") {
            SETG areaActual_o_obj:(endpointToo_l_obj)
        }
    }
}

#------------------------------#_____DYE the given object and move to it_____#------------------------------#

PROCEDURE global DYE_OBJECT integer:to_be_marked_o_obj {
    # "Find" the element that is to be executed. The benefit of FIND is that it also moves the view to the position of the element.
    # It is also used before the DYE so it doesn't automatically UNDYE the element.
        CC "Modeling" FIND objid:(to_be_marked_o_obj)
    # The DYE and UNDYE are useful to show where the execution has ended (e.g. when it ended prematurely).
    CC "Modeling" DYE (to_be_marked_o_obj) error-mark make-visible
    
}
  
#------------------------------#_____Create a delay_____#------------------------------#

PROCEDURE global MAKE_DELAY_MS integer:delay {
    SETL delay:((round(delay/10))*10)
    CC "AdoScript" SLEEP ms:(delay)
}


#------------------------------#_____Create a Ouput with Infos_____#------------------------------#

PROCEDURE global LOG_OUTPUT string:object1 object2:string {
  
    IF (object1 != "") {
        CC "Core" GET_CLASS_ID objid:(VAL object1)
        SETL object1_c_id:(classid)
        CC "Core" GET_CLASS_NAME classid:(VAL object1_c_id)
        SETL object1_c_name:(classname)
    
        CC "Application" GET_DATE_TIME date-format:"dd/mm/yyyy" time-format:"hh:mm:ss"
        SETL text_str:((object1_c_name) + " " + (date) + " " + (time) + "\n")

        CC "AdoScript" OUT winid:(robo_outputwin_str) text:(text_str)
    }
        IF (object2 != "") {
        CC "Core" GET_CLASS_ID objid:(VAL object2)
        SETL object2_c_id:(classid)
        CC "Core" GET_CLASS_NAME classid:(VAL object2_c_id)
        SETL object2_c_name:(classname)
    
        CC "Application" GET_DATE_TIME date-format:"dd/mm/yyyy" time-format:"hh:mm:ss"
        SETL text_str:((object2_c_name) + " " + (date) + " " + (time) + "\n")

        CC "AdoScript" OUT winid:(robo_outputwin_str) text:(text_str)
    }

}
#------------------------------#_____Clear a Ouput window_____#------------------------------#

PROCEDURE CLEAR_OUTPUT {
    CC "AdoScript" SET_OUT_MAX_LINE_COUNT 1
    CC "AdoScript" OUT winid:(robo_outputwin_str) text:("\n")
    CC "AdoScript" SET_OUT_MAX_LINE_COUNT 10000
}

#------------------------------#_____Determinate if a Item is inside the Pickup area_____#------------------------------#

PROCEDURE global ITEM_INSIDE_PICKUP integer:first_pickup_o_obj {
    #TODO:Siehe draw.io notes, fÃ¼r die korrekte berechnung von inside
    #Conversion Operators verwenden, damit ich if/else korrekt machen kann. 


    #CC "AdoScript" INFOBOX (item_l_obj)

    #Here we get the position of the pickup area
    CC "Core" GET_ATTR_VAL objid:(first_pickup_o_obj) attrid:(pickup_position_a_id)
    SETL pickup_position_val:(val)
    LEO parse:(pickup_position_val) get-tmm-value:xp:"x" get-tmm-value:yp:"y" get-tmm-value:wp:"w" get-tmm-value:hp:"h"
    SETL xp:(CMS xp)
    SETL yp:(CMS yp)
    SETL wp:(CMS wp)
    SETL hp:(CMS hp)
    #TODO: xp + wp zusammenrechnen fÃ¼r ein attribute & yp + hp

    CC "AdoScript" INFOBOX (VAL xp)

    #Here we get the positoin of the item 
    FOR i in:(item_l_obj) sep:" " {
        CC "Core" GET_ATTR_VAL objid:(i) attrid:(item_a_id)
        SETL item_position_val:(val)
        LEO parse:(pickup_position_val) get-tmm-value:xi:"x" get-tmm-value:yi:"y" get-tmm-value:wi:"w" get-tmm-value:hi:"h"
        #Now we conver them
        SETL xi:(CMS xi)
        SETL yi:(CMS yi)
        SETL wi:(CMS wi)
        SETL hi:(CMS hi)
        #Let's compare item position with pickup position
        IF (xp <= xi) {
            CC "AdoScript" INFOBOX ("TRUE")
        }
        }
    }

    





(*)
        CC "Core" GET_CLASS_ID objid:(VAL objid)
        CC "Core" GET_ATTR_ID classid:(classid) attrname:"Position"
        SET test_attr_id:(attrid)
        CC "Core" GET_ATTR_VAL objid:(VAL objid) attrid:(test_attr_id)
        SET attr_val:(val) 
        LEO parse:(attr_val) get-tmm-value:x:"x" get-tmm-value:y:"y" get-int-value:w:"w" get-int-value:h:"h"
        # increment x coordinate and set new position
        #SET x:(x + 1cm)
        CC "Modeling" SET_OBJ_POS objid:(VAL objid) x:(x) y:(y)
        CC "AdoScript" INFOBOX (VAL x)
        CC "AdoScript" INFOBOX (VAL y)
        CC "AdoScript" INFOBOX (VAL w)
        CC "AdoScript" INFOBOX (VAL h)



CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(activeModelId) classname:"Player"
SET player_c_obj:(objids)

CC "Core"  GET_CLASS_ID classname:"Player"
SET player_c_id:(classid)

CC "Core" GET_ATTR_ID classid:(player_c_id) attrname:"Name"
SET name_a_id:(attrid)
CC "Core" GET_ATTR_ID classid:(player_c_id) attrname:"Turn"
SET turn_a_id:(attrid)
(*)

#------------------------------#_____Final code_____#------------------------------#


CLEAR_OUTPUT
FIND_START_EVENT
FIND_NEXT_EVENT
FIND_AREA_FOR_ACTUAL_EVENT
DYE_OBJECT (VAL eventActual_o_obj)
DYE_OBJECT (VAL areaActual_o_obj)
LOG_OUTPUT (STR eventActual_o_obj) object2:(STR "")
LOG_OUTPUT (STR eventActual_o_obj) object2:(STR areaActual_o_obj)
ITEM_INSIDE_PICKUP (VAL areaActual_o_obj)



(*)
CLEAR_OUTPUT
FIND_START_EVENT
FIND_NEXT_EVENT
FIND_AREA_FOR_ACTUAL_EVENT
DYE_OBJECT
MAKE_DELAY_MS
LOG_OUTPUT
CC "Modeling" UNDYE_ALL modelid:(activeModelId)
(*)


#CC "AdoScript" INFOBOX (eventActual_o_obj)
#CC "AdoScript" INFOBOX (eventNext_o_obj)
#CC "AdoScript" INFOBOX (areaActual_o_obj)


(*)

TODO: 
Remove Intermediate Event?
Waypoint auch ein Area?
Delay einbauen in Model mit sekunden evt?
Pickup -> random picking order or select which first?

TODO:

#EXECUTE_PICKUP_AREA
#EXECUTE_FUNCTION_AREA
#EXECUTE_STORAGE_AREA
#CREATE_ITEM
#DELETE_ITEM

(*)


#------------------------------#_____exampel_____#------------------------------#
(*)
# get all selected objects
CC "Modeling" GET_SELECTED
IF (objids = "")
{
   CC "AdoScript" ERRORBOX "Select a connector first!"
   EXIT
}


# from the list of selected objects, extract the first objectid
SET firstselected:(token(objids,0," "))

# now the all from and to instance
CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL firstselected)
IF (ecode != 0)
{
   CC "AdoScript" ERRORBOX "Select a connector first!"
   EXIT
}

# now get the classes of the connected instances
CC "Core" GET_CLASS_ID objid:(fromobjid)
SET fromclassid:(classid)
CC "Core" GET_CLASS_ID objid:(toobjid)
SET toclassid:(classid)

# now get the names of the classes
CC "Core" GET_CLASS_NAME classid:(fromclassid)
SET fromclassname:(classname)
CC "Core" GET_CLASS_NAME classid:(toclassid)
SET toclassname:(classname)

# display the result
CC "AdoScript" INFOBOX ("You connected a " + fromclassname + " with a " + toclassname + ".")
